#!/bin/bash

is_started(){
    local DOMAIN_PORT="${1}"
    local USER_PASS="${2}"

    local STATE=$(curl -u "${USER_PASS}" -s "http://${DOMAIN_PORT}/system/console/bundles/.json" | python -c '
import sys, json;

allBundlesStarted = True

try:
    bundles = json.load(sys.stdin)["data"]
    for bundle in bundles:
        if bundle["state"] != "Active" and bundle["state"] != "Fragment":
            allBundlesStarted = False
except ValueError:
    allBundlesStarted = False
except KeyboardInterrupt:
    allBundlesStarted = False

if allBundlesStarted:
    print "Started"
else:
    print "Not Started"')

    if [ "Started" == "${STATE}" ]; then
        return 0
    else
        return 1
    fi
}

wait_for_startup(){
    local COUNT=1
    local PROJ_DIR="${1}"
    local TIMEOUT=$(get_config "${PROJ_DIR}" "aem.status.timeout" "180")
    local DOMAIN_PORT="${2}"
    local USER_PASS="${3}"

    local stop=""
    trap 'stop="true"' INT

    while true; do
        if [ "true" == "${stop}" ]; then
            break;
        fi

        if [ "${COUNT}" -gt "${TIMEOUT}" ]; then
            break;
        fi

        if is_started "${DOMAIN_PORT}" "${USER_PASS}" 2> /dev/null; then
            break;
        else
            sleep 1
            COUNT=$((COUNT+1))
        fi
    done

    trap - INT
}

command_start(){
    local PROJ_NAME="${1}"
    shift

    if [[ -n "${PROJ_NAME}" && "" != "${PROJ_NAME}" ]]; then
        local PROJ_DIR=$(project_directory "${PROJ_NAME}")

        if [ -d "${PROJ_DIR}" ]; then
            #Gather aem instance names and ports as entered
            local AEM_DEFAULT_INSTANCE_NAME=$(get_config "${PROJ_DIR}" "aem.default.instance.name" "author")
            local AEM_INSTANCE_NAMES=("${AEM_DEFAULT_INSTANCE_NAME}")
            local AEM_INSTANCES_WITH_PORT=()
            local AEM_INSTANCE_PORTS=()
            if [ $# -gt 0 ]; then
                AEM_INSTANCE_NAMES=()
                while printf "${1}" | grep '[^0-9]' >/dev/null; do
                    local AEM_INSTANCE_NAME="${1}"
                    AEM_INSTANCE_NAMES+=("${AEM_INSTANCE_NAME}")
                    shift

                    if printf "${1}" | grep '^[0-9]\+$' >/dev/null; then
                        AEM_INSTANCES_WITH_PORT+=("${AEM_INSTANCE_NAME}")
                        AEM_INSTANCE_PORTS+=("${1}")

                        shift
                    fi
                done
            fi

            #Expand any aliases
            expand_aliases AEM_INSTANCE_NAMES "${PROJ_DIR}" "${AEM_INSTANCE_NAMES[@]}"

            #Start instances
            for i in ${!AEM_INSTANCE_NAMES[@]}; do
                if [ -f "${PROJ_DIR}/sites/aem/${AEM_INSTANCE_NAMES[$i]}/crx-quickstart/bin/start" ]; then
                    #Run pre-start script
                    if [ -f "${PROJ_DIR}/.proj/bin/pre-start" ]; then
                        "${PROJ_DIR}/.proj/bin/pre-start" "${AEM_INSTANCE_NAMES[$i]}"
                    fi

                    #Get port
                    local AEM_INSTANCE_PORT=""
                    for j in ${!AEM_INSTANCES_WITH_PORT[@]}; do
                        if [[ "${AEM_INSTANCE_NAMES[$i]}" == "${AEM_INSTANCES_WITH_PORT[$j]}" ]]; then
                            AEM_INSTANCE_PORT="${AEM_INSTANCE_PORTS[$j]}"
                            break;
                        fi
                    done

                    if [[ "" == "${AEM_INSTANCE_PORT}" ]]; then
                        AEM_INSTANCE_PORT=`grep '^\tCQ_PORT=[0-9]*$' "${PROJ_DIR}/sites/aem/${AEM_INSTANCE_NAMES[$i]}/crx-quickstart/bin/start" | awk -F = '{print $2}'`
                    fi

                    #Start AEM
                    printf "Starting the ${AEM_INSTANCE_NAMES[$i]} AEM instance on port ${AEM_INSTANCE_PORT}\n"
                    CQ_PORT="${AEM_INSTANCE_PORT}" "${PROJ_DIR}/sites/aem/${AEM_INSTANCE_NAMES[$i]}/crx-quickstart/bin/start" > /dev/null 2>&1

                    (
                    local USER=$(get_config "${PROJ_DIR}" "aem.status.user" "admin")
                    local PASS=$(get_config "${PROJ_DIR}" "aem.status.password" "admin")
                    wait_for_startup "${PROJ_DIR}" "localhost:${AEM_INSTANCE_PORT}" "${USER}:${PASS}" 2> /dev/null
                    if is_started "localhost:${AEM_INSTANCE_PORT}" "${USER}:${PASS}" 2> /dev/null; then
                        notify "AEM Startup Status" "'${AEM_INSTANCE_NAMES[$i]}' started."
                    else
                        notify "AEM Startup Status" "'${AEM_INSTANCE_NAMES[$i]}' status unknown."
                    fi

                    #Run post-start script
                    if [ -f "${PROJ_DIR}/.proj/bin/post-start" ]; then
                        "${PROJ_DIR}/.proj/bin/post-start" "${AEM_INSTANCE_NAMES[$i]}"
                    fi
                    ) &
                else
                    printf "The ${PROJ_NAME} project doesn't have the requested ${AEM_INSTANCE_NAMES[$i]} AEM instance.  Unable to start the ${AEM_INSTANCE_NAMES[$i]} AEM instance.\n"
                fi
            done
        else
            printf "The ${PROJ_NAME} project doesn't exist in directory ${PROJ_DIR}.  Unable to start ${PROJ_NAME}.\n"
            return 65
        fi
    else
        printf "A project name is required to start a project.  Use '${PROGRAM_NAME} help start' for help with the start command.\n"
        return 64
    fi
}

command_start_help(){
    printf "USAGE\n"
    printf "   ${PROGRAM_NAME} start <project_name> [((<aem_instance_name> [<port>]) | <alias>)...]\n"
    printf "\n"
    printf "DESCRIPTION\n"
    printf "   The 'start' command is used to start an AEM instance for an existing project.  If no aem_instance_name is provided, the configured default instance is started.  If no configured default exists, the author instance is started.\n"
}

command_start_help_short(){
    printf "Starts a project using its start script.\n"
}
