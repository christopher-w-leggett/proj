#!/bin/bash

command_profile(){
    local PROJ_NAME="${1}"
    shift

    if [[ -n "${PROJ_NAME}" && "" != "${PROJ_NAME}" ]]; then
        local PROJ_DIR=$(project_directory "${PROJ_NAME}")

        if [ -d "${PROJ_DIR}" ]; then
            local AEM_INSTANCE_NAME=$(get_config "${PROJ_DIR}" "aem.default.instance.name" "author")
            if [ $# -gt 0 ]; then
                AEM_INSTANCE_NAME="${1}"
            fi

            local CQ_PID_FILE="${PROJ_DIR}/sites/aem/${AEM_INSTANCE_NAME}/crx-quickstart/conf/cq.pid"
            local AEM_RUNNING="n"
            if [ -f "${CQ_PID_FILE}" ]; then
                local CQ_PID="`cat ${CQ_PID_FILE}`"
                if [ "$(jps | grep ${CQ_PID} | grep quickstart | awk '{print $1}')" == "${CQ_PID}" ]; then
                    AEM_RUNNING="y"
                fi
            fi

            if [ "${AEM_RUNNING}" == "y" ]; then
                jvisualvm --openpid `cat ${CQ_PID_FILE}` &
            else
                printf "The ${AEM_INSTANCE_NAME} instance for project ${PROJ_NAME} is not running.  Unable to profile ${PROJ_NAME}.\n"
                return 65
            fi
        else
            printf "The ${PROJ_NAME} project doesn't exist in directory ${PROJ_DIR}.  Unable to profile ${PROJ_NAME}.\n"
            return 65
        fi
    else
        printf "A project name is required to profile a project.  Use '${PROGRAM_NAME} help profile' for help with the profile command.\n"
        return 64
    fi
}

command_profile_help(){
    printf "USAGE\n"
    printf "   ${PROGRAM_NAME} profile <project_name> [<aem_instance_name>]\n"
    printf "\n"
    printf "DESCRIPTION\n"
    printf "   The 'profile' command can be used to profile a project using the java provided jvisualvm.  If no aem_instance_name is provided, the configured default instance is used.  If no configured default exists, the author instance is used.\n"
}

command_profile_help_short(){
    printf "Opens jvisualvm connected to the pid AEM is currently running on.\n"
}
