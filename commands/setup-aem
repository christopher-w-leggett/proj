#!/bin/bash

_setup_aem(){
    # Grab parameters
    local AEM_JAR_PATH="${1}"
    local AEM_JAR_NAME=$(basename "${AEM_JAR_PATH}")
    local PROJ_NAME="${2}"
    local PROJ_DIR=$(project_directory "${PROJ_NAME}")

    # Define default values
    local DEFAULT_INSTANCE_NAME=$(get_config "${PROJ_NAME}" "aem.default.instance.name" "author")
    local DEFAULT_INSTANCE_TYPE=$(get_config "${PROJ_NAME}" "aem.default.instance.type" "author")
    local DEFAULT_PRODUCTION_READY_MODE=$(get_config "${PROJ_NAME}" "aem.default.production.ready.mode" "No")
    local DEFAULT_AUTHOR_PORT=$(get_config "${PROJ_NAME}" "aem.default.author.port" "4502")
    local DEFAULT_PUBLISH_PORT=$(get_config "${PROJ_NAME}" "aem.default.publish.port" "4503")
    local DEFAULT_AUTHOR_DEBUG_PORT=$(get_config "${PROJ_NAME}" "aem.default.author.debug.port" "30303")
    local DEFAULT_PUBLISH_DEBUG_PORT=$(get_config "${PROJ_NAME}" "aem.default.publish.debug.port" "30304")

    # Get AEM instance name
    local INSTANCE_NAME=""
    local INSTANCE_NAME_QUESTION="Please name this AEM instance [${DEFAULT_INSTANCE_NAME}]:"
    local INSTANCE_NAME_INPUT_MESSAGE="${INSTANCE_NAME_QUESTION}"
    while echo "${INSTANCE_NAME}" | grep '^[0-9]*$' >/dev/null; do
        echo "${INSTANCE_NAME_INPUT_MESSAGE}"
        read INSTANCE_NAME
        if [[ -z "${INSTANCE_NAME}" || "" == "${INSTANCE_NAME}" ]]; then
            INSTANCE_NAME="${DEFAULT_INSTANCE_NAME}"
        fi

        INSTANCE_NAME_INPUT_MESSAGE="Instance name must contain letters.  ${INSTANCE_NAME_QUESTION}"
    done
    if [ -d "${PROJ_DIR}/sites/aem/${INSTANCE_NAME}" ]; then
        echo "The ${INSTANCE_NAME} AEM instance already exists."
        return 81
    fi

    # Get AEM instance type
    local INSTANCE_TYPE=""
    prompt_options INSTANCE_TYPE "What type of AEM instance is this:" "${DEFAULT_INSTANCE_TYPE}" "author" "publish"

    # Get AEM runmodes
    local RUNMODES="${INSTANCE_TYPE}"
    local ADDITIONAL_RUNMODES=""
    if [[ -z "${ADDITIONAL_RUNMODES}" || "" == "${ADDITIONAL_RUNMODES}" ]]; then
        echo "Enter any additional runmodes:"
        read ADDITIONAL_RUNMODES
    fi
    if [[ -n "${ADDITIONAL_RUNMODES}" && "" != "${ADDITIONAL_RUNMODES}" ]]; then
        RUNMODES="${RUNMODES},${ADDITIONAL_RUNMODES}"
    fi

    # Get production ready mode
    local PRODUCTION_READY_MODE=""
    prompt_options PRODUCTION_READY_MODE "Would you like to setup in production ready mode?" "${DEFAULT_PRODUCTION_READY_MODE}" "Yes" "No"
    if [ "Yes" == "${PRODUCTION_READY_MODE}" ]; then
        RUNMODES="${RUNMODES},nosamplecontent"
    fi

    # Define port defaults
    local PORT="${DEFAULT_AUTHOR_PORT}"
    local DEBUG_PORT="${DEFAULT_AUTHOR_DEBUG_PORT}"
    if [ "publish" == "${INSTANCE_TYPE}" ]; then
        PORT="${DEFAULT_PUBLISH_PORT}"
        DEBUG_PORT="${DEFAULT_PUBLISH_DEBUG_PORT}"
    fi

    # Get port
    echo "Enter the port [${PORT}]:"
    read USER_DEFINED_PORT
    if [[ -n "${USER_DEFINED_PORT}" && "" != "${USER_DEFINED_PORT}" ]]; then
        PORT="${USER_DEFINED_PORT}"
    fi

    # Get debug port
    echo "Enter the debug port [${DEBUG_PORT}]:"
    read USER_DEFINED_DEBUG_PORT
    if [[ -n "${USER_DEFINED_DEBUG_PORT}" && "" != "${USER_DEFINED_DEBUG_PORT}" ]]; then
        DEBUG_PORT="${USER_DEFINED_DEBUG_PORT}"
    fi

    local PACKAGES=()
    echo "Do you have any packages you want installed (blank value to stop adding packages)?"
    read ADDED_PACKAGE
    while [[ -n "${ADDED_PACKAGE}" && "" != "${ADDED_PACKAGE}" ]]; do
        if [ -f "${ADDED_PACKAGE}" ]; then
            PACKAGES+=("${ADDED_PACKAGE}")
        else
            echo "${ADDED_PACKAGE} is not a valid package."
        fi

        read ADDED_PACKAGE
    done

    # Create install directory
    local INSTALL_DIR="${PROJ_DIR}/sites/aem/${INSTANCE_NAME}"
    if [ ! -d "${INSTALL_DIR}" ]; then
        echo "Creating ${INSTALL_DIR}."
        mkdir -p "${INSTALL_DIR}"
    fi

    # Setup AEM
    echo "Copying ${AEM_JAR_PATH} to ${INSTALL_DIR}."
    cp "${AEM_JAR_PATH}" "${INSTALL_DIR}"

    local CURRENT_DIR=$(pwd)

    echo "Switching to ${INSTALL_DIR} to unpack jar."
    cd "${INSTALL_DIR}"
    java -jar "${AEM_JAR_NAME}" -unpack &> /dev/null

    echo "Jar unpacked, switching back to ${CURRENT_DIR}."
    cd "${CURRENT_DIR}"

    if [ ${#PACKAGES[@]} -ne 0 ]; then
        mkdir "${INSTALL_DIR}/crx-quickstart/install"

        for ((i = 0; i < ${#PACKAGES[@]}; i++)); do
            echo "Copying package ${PACKAGES[$i]}."
            cp "${PACKAGES[$i]}" "${INSTALL_DIR}/crx-quickstart/install"
        done
    fi

    sed -i '' -e "s/CQ_PORT=450[0-9]/CQ_PORT=${PORT}/g" "${INSTALL_DIR}/crx-quickstart/bin/start"

    sed -i '' -e "s/CQ_RUNMODE='.*'/CQ_RUNMODE='${RUNMODES}'/g" "${INSTALL_DIR}/crx-quickstart/bin/start"

    sed -i '' -e "s/CQ_JVM_OPTS='\(.*\)'/CQ_JVM_OPTS='\1 -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=${DEBUG_PORT}'/g" "${INSTALL_DIR}/crx-quickstart/bin/start"
}

command_setup-aem(){
    local PROJ_NAME="${1}"
    shift

    if [[ -n "${PROJ_NAME}" && "" != "${PROJ_NAME}" ]]; then
        local PROJ_DIR=$(project_directory "${PROJ_NAME}")

        if [ -d "${PROJ_DIR}" ]; then
            #Grab any configured default jar
            local DEFAULT_AEM_JAR_PATH=$(get_config "${PROJ_NAME}" "aem.default.jar" "")

            local SETUP_AEM="Yes"
            while [ "Yes" == "${SETUP_AEM}" ]; do
                #Grab user input for AEM jar location
                if [[ -z "${DEFAULT_AEM_JAR_PATH}" || "" == "${DEFAULT_AEM_JAR_PATH}" ]]; then
                    echo "Provide path to AEM jar:"
                else
                    echo "Provide path to AEM jar [${DEFAULT_AEM_JAR_PATH}]:"
                fi
                local AEM_JAR_PATH=""
                read AEM_JAR_PATH

                #If no jar specified, use default
                if [[ -z "${AEM_JAR_PATH}" || "" == "${AEM_JAR_PATH}" || ! -f "${AEM_JAR_PATH}" ]]; then
                    AEM_JAR_PATH="${DEFAULT_AEM_JAR_PATH}"
                fi

                #Setup AEM if we have all necessary information
                if [[ -n "${AEM_JAR_PATH}" && "" != "${AEM_JAR_PATH}" && -f "${AEM_JAR_PATH}" ]]; then
                    #Set default jar to last selected
                    DEFAULT_AEM_JAR_PATH="${AEM_JAR_PATH}"

                    _setup_aem "${AEM_JAR_PATH}" "${PROJ_NAME}"
                else
                    echo "No AEM jar provided, unable to setup AEM."
                    return 80
                fi

                #Ask user if they want to setup another instance
                prompt_options SETUP_AEM "Would you like to setup another AEM instance?" "No" "Yes" "No"
            done
        else
            echo "The ${PROJ_NAME} project doesn't exists in directory ${PROJ_DIR}.  Please use '${PROGRAM_NAME} init ${PROJ_NAME}' to initialize the project."
            return 65
        fi
    else
        echo "A project name is required to setup AEM in the project directory.  Use '${PROGRAM_NAME} help setup-aem' for help with the setup-aem command."
        return 64
    fi
}

command_setup-aem_help(){
    echo "USAGE"
    echo "   ${PROGRAM_NAME} setup-aem <project_name>"
    echo ""
    echo "DESCRIPTION"
    echo "   The 'setup-aem' command is used to setup one or more AEM instances in an existing project."
}

command_setup-aem_help_short(){
    echo "Sets up one or more AEM instances."
}
