#!/bin/bash

PROGRAM_NAME=$(basename "$0")
PROGRAM_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
PROGRAM_VERSION="0.2.0"

#####################
# Include Utilities #
#####################
. "${PROGRAM_DIR}/utility"

####################
# Include Commands #
####################
COMMAND_DIR="${PROGRAM_DIR}/commands"
. "${COMMAND_DIR}/help"
VALID_COMMANDS=(dir config init list start stop setup-aem setup-dispatcher profile status alias)
for VALID_COMMAND in ${VALID_COMMANDS[@]}; do
    . "${COMMAND_DIR}/${VALID_COMMAND}"
done

################
# Main Program #
################
while getopts ":vh" opt; do
    case "${opt}" in
        v)
            printf "proj version ${PROGRAM_VERSION}\n"
            exit 0
            ;;
        \?)
            printf "Invalid option: -${OPTARG}\n" >&2
            exit 67
            ;;
        \:)
            printf "Option -${OPTARG} requires an argument.\n" >&2
            exit 68
            ;;
    esac
done
shift $((OPTIND-1))

HAS_HELP_OPTION="n"
if [ "${1}" == "help" ]; then
    HAS_HELP_OPTION="y"
    shift
fi

COMMAND_NAMES=()
if [[ " ${VALID_COMMANDS[*]} " == *" ${1} "* ]]; then
    COMMAND_NAMES+=("${1}")
fi
shift
if [ "y" == "${HAS_HELP_OPTION}" ]; then
    while [[ " ${VALID_COMMANDS[*]} " == *" ${1} "* ]]; do
        COMMAND_NAMES+=("${1}")
        shift
    done
fi

if [[ "n" == "${HAS_HELP_OPTION}" && ${#COMMAND_NAMES[@]} -ne 0 ]]; then
    #Verify projects directory configuration is set prior to running commands
    PROJECTS_DIR=$(get_config "" "proj.paths.projects" "")
    while [[ "" == "${PROJECTS_DIR}" ]]; do
        printf "proj.paths.projects configuration is required.  Please provide a valid directory where projects will be managed:\n"
        read PROJECTS_DIR

        if [[ "" != "${PROJECTS_DIR}" ]]; then
            set_config "" "proj.paths.projects" "${PROJECTS_DIR}"
        fi
    done

    #Run commands
    for COMMAND_NAME in ${COMMAND_NAMES[@]}; do
        command_${COMMAND_NAME} "$@"

        COMMAND_STATUS=$?
        if [ ${COMMAND_STATUS} -ne 0 ]; then
            exit ${COMMAND_STATUS}
        fi
    done
else
    command_help ${COMMAND_NAMES[@]}
fi
