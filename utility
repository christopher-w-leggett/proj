#!/bin/bash

# Returns the absolute path to the project directory for the provided project name. TODO: Remove symlink logic and relative_dir logic from this.
project_directory(){
    #Read arguments
    local PROJ_NAME="${1}"

    #Read projects path from user configuration.  This will always have a value or proj won't run.
    local PROJECTS_DIR=$(get_config "" "proj.paths.projects" "")

    #return project directory.  proj.paths.projects config will always contain a value by the time this code runs.
    local FINAL_DIR="${PROJECTS_DIR}/${PROJ_NAME}"

    printf '%s' "${FINAL_DIR}"
}

# Returns the absolute path to a project directory for the provided project name.  If the subdirectory doesn't exit,
# it is created.
ensure_project_directory(){
    #Read arguments
    local PROJ_NAME="${1}"
    local RELATIVE_DIR="${2}"

    #Read projects path from user configuration.  This will always have a value or proj won't run.
    local PROJECTS_DIR=$(get_config "" "proj.paths.projects" "")

    #return project directory.  proj.paths.projects config will always contain a value by the time this code runs.
    local FINAL_DIR=""
    local FIRST_SUBDIR=""
    local LINK_DIR=""
    if [ "" == "${RELATIVE_DIR}" ]; then
        FINAL_DIR="${PROJECTS_DIR}/${PROJ_NAME}"
    else
        #determine directory name of first subdirectory
        local FIRST_SUBDIR_NAME=$(printf '%s' "${RELATIVE_DIR}" | awk -F/ '{print $1}')
        LINK_DIR="${PROJECTS_DIR}/${PROJ_NAME}/${FIRST_SUBDIR_NAME}"

        #get directory configuration (replacing any [[PROJ_NAME]] tokens) and if set,
        #determine actual directory path for this subdirectory
        local ABSOLUTE_ROOT_DIR="${PROJECTS_DIR}/${PROJ_NAME}"
        local SUBDIR_CONFIG=$(get_config "" "proj.paths.alternate.${FIRST_SUBDIR_NAME}" "")
        SUBDIR_CONFIG="${SUBDIR_CONFIG//\[\[PROJ_NAME\]\]/${PROJ_NAME}}"
        if [[ "${SUBDIR_CONFIG}" == "->"* ]]; then
            ABSOLUTE_ROOT_DIR=$(printf '%s' "${SUBDIR_CONFIG}" | awk -F'->' '{ print $2 }')
        fi

        #return final path
        FINAL_DIR="${ABSOLUTE_ROOT_DIR}/${RELATIVE_DIR}"
        FIRST_SUBDIR="${ABSOLUTE_ROOT_DIR}/${FIRST_SUBDIR_NAME}"
    fi

    if [[ "" != "${FINAL_DIR}" && ! -d "${FINAL_DIR}" ]]; then
        printf '%s\n' "Creating ${FINAL_DIR}."
        mkdir -p "${FINAL_DIR}"
    fi
    if [[ "" != "${LINK_DIR}" && ! -d "${LINK_DIR}" ]]; then
        printf '%s\n' "Linking ${LINK_DIR} to ${FIRST_SUBDIR}."
        ln -s "${FIRST_SUBDIR}" "${LINK_DIR}"
    fi
}

is_process_stopped(){
    local PID="${1}"

    # kill -0 lets us know process is running, so reverse output
    if kill -0 "${PID}" 2> /dev/null; then
        return 1
    else
        return 0
    fi
}

wait_for(){
    local i=1
    local spinner="/-\|"
    local displayed=""
    local stop=""

    trap 'stop="true"' INT

    while true; do
        if [ "true" == "${stop}" ]; then
            break;
        fi
        if [ "true" == "${displayed}" ]; then
            printf "\b"
        fi
        printf "${spinner:i++%${#spinner}:1}"
        displayed="true"

        if "$@"; then
            break;
        else
            sleep 0.5
        fi
    done

    trap - INT

    if [ "true" == "${displayed}" ]; then
        printf "\b \b"
    fi
}

prompt_options(){
    #Capture variable to store result into
    local __RESULT=$1
    shift

    #Capture prompt values
    local PROMPT_QUESTION="${1}"
    local DEFAULT_VALUE="${2}"
    local PROMPT_INPUT=": "
    if [ "" != "${DEFAULT_VALUE}" ]; then
        PROMPT_INPUT="[${DEFAULT_VALUE}]${PROMPT_INPUT}"
    fi
    shift 2

    #Prompt question
    printf '%s\n' "${PROMPT_QUESTION}"

    #Prompt options
    local COUNTER=1
    for VALID_OPT in "$@"; do
        printf '%s\n' "${COUNTER}) ${VALID_OPT}"
        COUNTER=$[COUNTER + 1]
    done

    #Grab input
    local VALUE=""
    while [ "" == "${VALUE}" ]; do
        local CHOSEN_OPT=""
        printf '%s' "${PROMPT_INPUT}"
        read CHOSEN_OPT

        if [[ "" == "${CHOSEN_OPT}" && "" != "${DEFAULT_VALUE}" ]]; then
            VALUE="${DEFAULT_VALUE}"
        elif printf '%s' "${CHOSEN_OPT}" | grep '^[0-9]*$' >/dev/null; then
            local OPT_COUNTER=1
            for VALID_OPT in "$@"; do
                if [ "${CHOSEN_OPT}" == "${OPT_COUNTER}" ]; then
                    VALUE="${VALID_OPT}"
                fi
                OPT_COUNTER=$[OPT_COUNTER + 1]
            done
        fi

        if [ "" == "${VALUE}" ]; then
            printf '%s\n' "Invalid selection."
        fi
    done

    eval $__RESULT="${VALUE}"
}

get_config(){
    local PROP_VALUE=""

    #Read parameters
    local PROJ_DIR="${1}"
    local PROP_NAME="${2}"
    local DEFAULT_VALUE="${3}"

    #Try to read configuration from project directory
    if [[ "" != "${PROJ_DIR}" && -d "${PROJ_DIR}" ]]; then
        local PROJ_CONF_FILE="${PROJ_DIR}/.proj/proj.cfg"

        if [ -f "${PROJ_CONF_FILE}" ]; then
            #Found project configuration, try to pull from there.
            PROP_VALUE=`cat "${PROJ_CONF_FILE}" | grep "${PROP_NAME}" | awk -F= '{ st = index($0,"=");print substr($0,st+1)}'`
        fi
    fi

    local USER_CONF_FILE="${HOME}/.proj/proj.cfg"
    if [[ -f "${USER_CONF_FILE}" && "" == "${PROP_VALUE}" ]]; then
        #Value is empty, try to pull from user config
        PROP_VALUE=`cat "${USER_CONF_FILE}" | grep "${PROP_NAME}" | awk -F= '{ st = index($0,"=");print substr($0,st+1)}'`
    fi

    if [ "" == "${PROP_VALUE}" ]; then
        #Value still empty, use default
        PROP_VALUE="${DEFAULT_VALUE}"
    fi

    printf '%s' "${PROP_VALUE}"
}

set_config(){
    local PROJ_DIR="${1}"
    local CONF_DIR="${HOME}/.proj"

    if [[ "" != "${PROJ_DIR}" && -d "${PROJ_DIR}" ]]; then
        #Found project directory, write to project configuration
        CONF_DIR="${PROJ_DIR}/.proj"
    fi

    local CONF_FILE="${CONF_DIR}/proj.cfg"
    local PROP_NAME="${2}"
    local PROP_VALUE="${3}"

    if [ ! -d "${CONF_DIR}" ]; then
        # TODO: Move this call into else block when determining if we are dealing with a project specific config.
        mkdir -p "${CONF_DIR}"
    fi
    if [ ! -f "${CONF_FILE}" ]; then
        touch "${CONF_FILE}"
    fi

    if grep "${PROP_NAME}" "${CONF_FILE}" >/dev/null; then
        #Replace property value
        local PROP_VALUE_ESCAPED="${PROP_VALUE//\[/\\[}"
        PROP_VALUE_ESCAPED="${PROP_VALUE_ESCAPED//\]/\\]}"
        PROP_VALUE_ESCAPED="${PROP_VALUE_ESCAPED//\//\\/}"
        sed -i '' -e "s/${PROP_NAME}=.*/${PROP_NAME}=${PROP_VALUE_ESCAPED}/g" "${CONF_FILE}"
    else
        #Append property
        printf '%s\n' "${PROP_NAME}=${PROP_VALUE}" >> ${CONF_FILE}
    fi
}

expand_aliases(){
    local __RESULT=$1
    local PROJ_DIR="${2}"
    shift 2

    local EXPANDED_NAMES=()
    #Loop through names and expand aliases
    local ALIAS_FILE="${PROJ_DIR}/.proj/aliases"
    for NAME in $@; do
        #Attempt to find alias line in alias file
        local ALIAS_LINE=""
        if [ -f "${ALIAS_FILE}" ]; then
            ALIAS_LINE=$(grep "${NAME}=" "${ALIAS_FILE}")
        fi

        if [ "" != "${ALIAS_LINE}" ]; then
            #NAME matches an alias, so read instance names from alias file
            local ALIASED_NAMES=($(printf '%s' "${ALIAS_LINE}" | awk -F= '{ st = index($0,"=");print substr($0,st+1)}'))
            for ALIASED_NAME in ${ALIASED_NAMES[@]}; do
                if [[ " ${EXPANDED_NAMES[*]} " != *" ${ALIASED_NAME} "* ]]; then
                    EXPANDED_NAMES+=("${ALIASED_NAME}")
                fi
            done
        else
            #NAME is aem instance name so read it directly
            if [[ " ${EXPANDED_NAMES[*]} " != *" ${NAME} "* ]]; then
                EXPANDED_NAMES+=("${NAME}")
            fi
        fi
    done

    eval $__RESULT='("${EXPANDED_NAMES[@]}")'
}

notify(){
    local DISTRO="$(uname | tr '[:upper:]' '[:lower:]')"
    if declare -f "_notify_${DISTRO}" > /dev/null; then
        "_notify_${DISTRO}" "${1}" "${2}"
    else
        printf '%s\n' "${1} - ${2}"
    fi
}

_notify_darwin(){
    local TITLE=$1
    local MESSAGE=$2

    osascript -e "display notification \"${MESSAGE}\" with title \"${TITLE}\""
}